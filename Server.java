import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
import java.util.Scanner;

/**
 * This class listens for incoming client connections and executes Linux commands
 * based on the commands received from the clients. It sends the output of the commands
 * back to the clients.
 */
public class Server {
    public static void main(String[] args) throws IOException{
        Scanner in = new Scanner(System.in);

        System.out.println("Please enter the Port Number for the server to Listen:");
        int portNum = in.nextInt();

        try(ServerSocket serverSocket = new ServerSocket(portNum)){// Create socket server that listen on port(portNum)
            System.out.println("Listening on port: " + portNum);

            // Label loop to exit when the connection is terminated by the client
            clientLoop:
            while(true){
                Socket socket = serverSocket.accept();// Accept the connection from the client and start listening to its requests
                System.out.println("Client connected to this server with port number: " + portNum);
                BufferedReader reader = new BufferedReader (new InputStreamReader(socket.getInputStream()));// Object to read input from the Client
                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);// Object to send data to the Client

                String inputFromClient;

                while ((inputFromClient = reader.readLine()) != null) {// Read command from the Client while there is a connection
                    System.out.println("Received: " + inputFromClient);
                    int commandNum = Integer.parseInt(inputFromClient);//Convert string to int

                    //Runs a command depending on the input from the Client
                    switch (commandNum){
                        case 1:
                            writer.println(new Date());
                            writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
                            break;
                        case 2:
                            runCommand("uptime", writer);
                            break;
                        case 3:
                            runCommand("free -m", writer);
                            break;
                        case 4:
                            runCommand("netstat -an", writer);
                            break;
                        case 5:
                            runCommand("who", writer);
                            break;
                        case 6:
                            runCommand("ps -e", writer);
                            break;
                        case 7:
                            System.out.println("Client disconnected.");
                            socket.close();
                            break clientLoop; // Exit the loop after ending the connection
                        default:
                            writer.println("Invalid option.");
                            writer.println("END_OF_OUTPUT");
                            break;
                    }//end switch
                    writer.flush();
                }//end while
            }
        } catch (IOException e) {
            System.err.println("Server exception: " + e.getMessage());
            e.printStackTrace();
        }//end catch
    }//end main

    /**
     * Runs a Linux command depending on the option given by the Client.
     * Sends the results to the Client.
     *
     * @param command The Linux command to execute.
     * @param writer  The PrintWriter used to send output to the client.
     * */
    private static void runCommand(String command, PrintWriter writer){
        if (command != null) {
            try {
                Process process = Runtime.getRuntime().exec(command);// Run the Linux command
                BufferedReader commandOutput = new BufferedReader(new InputStreamReader(process.getInputStream()));// Object to read the output of the command
                BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));// Object to get the error generated by the command

                String output;
                // Read the command's output
                while ((output = commandOutput.readLine()) != null) {
                    writer.println(output);
                }
                while ((output = stdError.readLine()) != null) {
                    writer.println(output);
                }
                commandOutput.close();
                stdError.close();

                // Send a marker to indicate that command output is complete
                writer.println("END_OF_OUTPUT");
            } catch (IOException e) {
                writer.println("Error executing command: " + e.getMessage());
                writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
            }
        } else {
            writer.println("Invalid request. Please enter a number between 1 and 6.");
            writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
        }
    }//end method
}//end class