import java.io.*;
//import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
//import java.util.Scanner;

public class ServerThread extends Thread{
	private Socket socket;
	private Integer commandNum;
	private BufferedReader reader;
	private PrintWriter writer;

	ServerThread(Socket socket){
		this.socket = socket;
	}

	public void run(){
		try {
			PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);//Object to write output to the client
			BufferedReader reader = new BufferedReader (new InputStreamReader(socket.getInputStream()));// Object to read input from the Client 
			String inputFromClient = reader.readLine();//read the input from the client
			if(inputFromClient != null)//verify is a valid command 
			{
				int commandNum = Integer.parseInt(inputFromClient);//Convert string to integer type
				System.out.println("Request: " + commandNum);


				if(commandNum == 7)//end the client connection to the server 
				{
					System.out.println("Connection Terminated by user");
					socket.close();
				}//end if
				else {
					//run the commands according to the user input
					switch (commandNum){
					case 1:
						writer.println(new Date());
						writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
						break;
					case 2:
						runCommand("uptime", writer);
						break;
					case 3:
						runCommand("free -m", writer);
						break;
					case 4:
						runCommand("netstat -an", writer);
						break;
					case 5:
						runCommand("who", writer);
						break;
					case 6:
						runCommand("ps -e", writer);
						break;
					default:
						writer.println("Invalid option.");
						writer.println("END_OF_OUTPUT");
						break;
					}//end switch
				}//end if else
			}//end comparing if input is null
			writer.flush();
			socket.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// Object to send data to the Client
	}//end run()	

	/**
	 * Runs a Linux command depending on the option given by the Client.
	 * Sends the results to the Client.
	 *
	 * @param command The Linux command to execute.
	 * @param writer  The PrintWriter used to send output to the client.
	 * */
	private static void runCommand(String command, PrintWriter writer){
		if (command != null) {
			try {
				Process process = Runtime.getRuntime().exec(command);// Run the Linux command
				BufferedReader commandOutput = new BufferedReader(new InputStreamReader(process.getInputStream()));// Object to read the output of the command
				BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));// Object to get the error generated by the command

				String output;
				// Read the command's output
				while ((output = commandOutput.readLine()) != null) {
					writer.println(output);
				}
				while ((output = stdError.readLine()) != null) {
					writer.println(output);
				}
				commandOutput.close();
				stdError.close();

				// Send a marker to indicate that command output is complete
				writer.println("END_OF_OUTPUT");
			} catch (IOException e) {
				writer.println("Error executing command: " + e.getMessage());
				writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
			}
		} else {
			writer.println("Invalid request. Please enter a number between 1 and 6.");
			writer.println("END_OF_OUTPUT");// Send a marker to indicate that command output is complete
		}
	}//end method


	public Socket getSocket() {
		return socket;
	}

	public void setSocket(Socket socket) {
		this.socket = socket;
	}

	public Integer getCommandNum() {
		return commandNum;
	}

	public void setCommandNum(Integer commandNum) {
		this.commandNum = commandNum;
	}

	public BufferedReader getReader() {
		return reader;
	}

	public void setReader(BufferedReader reader) {
		this.reader = reader;
	}

	public PrintWriter getWriter() {
		return writer;
	}

	public void setWriter(PrintWriter writer) {
		this.writer = writer;
	}
}
